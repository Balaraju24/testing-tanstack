import { jsxs, jsx, Fragment } from "react/jsx-runtime";
import { L as LoadingComponent } from "./Loading-CtQhAIXf.js";
import { D as DefaultUserIcon } from "./default-user-EV710LEP.js";
import { A as Avatar } from "./avatar-DZ-dXD0g.js";
import { f as deleteSingleCaseChatAPI, h as createChatAPI, u as updateChatAPI, i as chatViewMessageAPI, j as getSingleCaseChatDetailsAPI } from "./service-1g9dZr4o.js";
import { b as colors } from "./statusConstants-t7T05Rlh.js";
import { s as sliceFilename } from "./manage-CWSyPq63.js";
import { u as userStore } from "./userDetails-Dbr9T6uw.js";
import { useMutation, useQueryClient, useInfiniteQuery } from "@tanstack/react-query";
import { useParams } from "@tanstack/react-router";
import { useStore } from "@tanstack/react-store";
import dayjs from "dayjs";
import customParseFormat from "dayjs/plugin/customParseFormat.js";
import Linkify from "linkify-react";
import { File, CheckCheck, Check, Paperclip, X } from "lucide-react";
import { useState, useRef, useCallback, useEffect } from "react";
import { toast } from "sonner";
import { D as DeleteStrokeIcon } from "./delete-stroke-icon-mn8-8d5M.js";
import { B as Button } from "./router-o2MrkizZ.js";
import { P as Popover, a as PopoverTrigger, b as PopoverContent } from "./popover-CzRIlGkS.js";
import { T as Textarea } from "./textarea-Bgbbi7bt.js";
import { f as fileUploadAPI, u as uploadToS3API } from "./fileUpload-BBm5-XTb.js";
import { useDropzone } from "react-dropzone";
import { T as TabValuesForViewCase } from "./TabValuesForViewCase-CyAukXxK.js";
const NoChatData = ({ className }) => {
  return /* @__PURE__ */ jsxs(
    "svg",
    {
      className,
      width: "500",
      height: "376",
      viewBox: "0 0 500 376",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ jsx(
          "path",
          {
            d: "M134.367 160.728C127.582 190.195 175.229 260.791 250.805 250.862C285.955 246.242 286.135 228.467 315.445 210.094C332.916 199.143 356.412 192.65 365.88 173.965C374.057 157.837 374.041 138.972 367.066 125.491C351.381 95.1739 313.506 69.6972 265.714 104.864C217.92 140.03 151.874 84.7316 134.367 160.728Z",
            fill: "url(#paint0_linear_5056_16950)"
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            d: "M279.647 249.901C303.549 230.239 328.279 209.16 355 202.675C382.563 195.978 384.827 205.263 383.042 218.583C381.257 231.903 365.666 260.418 328.204 268.981C290.732 277.547 257.282 268.305 279.647 249.901Z",
            fill: "url(#paint1_linear_5056_16950)"
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            d: "M212.613 272.047H345.665C349.382 272.047 352.387 269.043 352.387 265.325V221.012C352.387 217.294 349.382 214.29 345.665 214.29H212.613C208.895 214.29 205.891 217.294 205.891 221.012V265.344C205.891 269.043 208.895 272.047 212.613 272.047Z",
            fill: "#D2D2D2"
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            d: "M326.795 236.428H229.438M326.753 251.584H271.817",
            stroke: "white",
            strokeWidth: "5.27333",
            strokeMiterlimit: "10",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            d: "M336.168 271.966V245.829L369.478 271.966H336.168Z",
            fill: "#D2D2D2"
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M414.125 266.763V269.376C414.125 270.818 412.969 271.989 411.546 271.989H380.602C379.179 271.989 378.023 270.818 378.023 269.376V266.721C378.023 258.814 386.941 253.677 396.074 253.677C405.207 253.677 414.125 258.817 414.125 266.721M402.548 230.722C406.124 234.297 406.124 240.094 402.548 243.67C398.972 247.246 393.175 247.246 389.6 243.67C386.024 240.094 386.024 234.297 389.6 230.722C393.175 227.146 398.972 227.146 402.548 230.722Z",
            fill: "#D2D2D2"
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            d: "M212.613 115.087H345.665C349.382 115.087 352.387 112.083 352.387 108.365V64.0517C352.388 63.1688 352.214 62.2943 351.877 61.4783C351.539 60.6624 351.044 59.921 350.42 59.2967C349.795 58.6723 349.054 58.1772 348.238 57.8398C347.422 57.5023 346.548 57.3291 345.665 57.3301H212.613C208.895 57.3301 205.891 60.334 205.891 64.0517V108.384C205.891 112.083 208.895 115.087 212.613 115.087Z",
            fill: "#D2D2D2"
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            d: "M326.795 79.4678H229.438M326.753 94.6239H271.817",
            stroke: "white",
            strokeWidth: "5.27333",
            strokeMiterlimit: "10",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            d: "M336.168 115.005V88.8682L369.478 115.005H336.168Z",
            fill: "#D2D2D2"
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M414.125 109.803V112.416C414.125 113.858 412.969 115.028 411.546 115.028H380.602C379.179 115.028 378.023 113.858 378.023 112.416V109.761C378.023 101.854 386.941 96.7167 396.074 96.7167C405.207 96.7167 414.125 101.856 414.125 109.761M402.548 73.7617C406.124 77.3373 406.124 83.1345 402.548 86.7101C398.972 90.2856 393.175 90.2856 389.6 86.7101C386.024 83.1345 386.024 77.3373 389.6 73.7617C393.175 70.1862 398.972 70.1862 402.548 73.7617Z",
            fill: "#D2D2D2"
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            d: "M287.067 193.567H154.015C150.297 193.567 147.293 190.563 147.293 186.845V142.532C147.292 141.649 147.465 140.774 147.803 139.958C148.14 139.142 148.636 138.401 149.26 137.777C149.884 137.152 150.626 136.657 151.442 136.32C152.258 135.982 153.132 135.809 154.015 135.81H287.067C290.785 135.81 293.789 138.814 293.789 142.532V186.864C293.789 190.563 290.785 193.567 287.067 193.567Z",
            fill: "#D2D2D2"
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            d: "M172.887 157.948H270.244M172.929 173.104H227.865",
            stroke: "white",
            strokeWidth: "5.27333",
            strokeMiterlimit: "10",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            d: "M163.513 193.486V167.349L130.203 193.486H163.513Z",
            fill: "#D2D2D2"
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M85.5547 188.283V190.896C85.5547 192.338 86.7097 193.509 88.1336 193.509H119.077C120.5 193.509 121.656 192.338 121.656 190.896V188.241C121.656 180.334 112.739 175.197 103.605 175.197C94.4719 175.197 85.5547 180.337 85.5547 188.241M97.1308 152.242C93.5552 155.817 93.5552 161.615 97.1308 165.19C100.706 168.766 106.504 168.766 110.079 165.19C113.655 161.615 113.655 155.817 110.079 152.242C106.504 148.666 100.706 148.666 97.1308 152.242Z",
            fill: "#D2D2D2"
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M346.996 161.254H345.209C345.002 161.254 344.804 161.171 344.658 161.025C344.512 160.879 344.43 160.681 344.43 160.474V158.687C344.43 158.256 344.781 157.908 345.209 157.908H346.996C347.424 157.908 347.776 158.259 347.776 158.687V160.474C347.776 160.576 347.756 160.678 347.717 160.773C347.678 160.867 347.62 160.954 347.548 161.026C347.475 161.099 347.389 161.156 347.294 161.195C347.2 161.234 347.098 161.254 346.996 161.254ZM340.801 161.254H339.015C338.808 161.253 338.61 161.17 338.464 161.024C338.318 160.878 338.236 160.68 338.235 160.474V158.687C338.235 158.256 338.586 157.908 339.015 157.908H340.801C341.23 157.908 341.581 158.259 341.581 158.687V160.474C341.58 160.68 341.498 160.878 341.352 161.024C341.206 161.171 341.008 161.253 340.801 161.254ZM334.603 161.254H332.817C332.61 161.253 332.412 161.171 332.266 161.024C332.12 160.878 332.038 160.68 332.037 160.474V158.687C332.037 158.256 332.388 157.908 332.817 157.908H334.603C335.032 157.908 335.383 158.259 335.383 158.687V160.474C335.383 160.576 335.363 160.678 335.324 160.773C335.285 160.867 335.228 160.953 335.155 161.026C335.083 161.098 334.997 161.156 334.902 161.195C334.807 161.234 334.706 161.254 334.603 161.254ZM328.409 161.254H326.622C326.416 161.253 326.218 161.171 326.072 161.024C325.926 160.878 325.843 160.68 325.842 160.474V158.687C325.842 158.256 326.194 157.908 326.622 157.908H328.409C328.841 157.908 329.192 158.259 329.192 158.687V160.474C329.19 160.681 329.107 160.878 328.96 161.024C328.814 161.17 328.616 161.252 328.409 161.254ZM322.215 161.254H320.428C320.221 161.254 320.022 161.172 319.875 161.026C319.728 160.879 319.645 160.681 319.645 160.474V158.687C319.645 158.256 319.996 157.908 320.428 157.908H322.215C322.643 157.908 322.994 158.259 322.994 158.687V160.474C322.994 160.902 322.643 161.254 322.215 161.254ZM340.575 154.499H338.788C338.581 154.499 338.383 154.416 338.237 154.27C338.091 154.124 338.009 153.926 338.008 153.719V151.929C338.008 151.501 338.36 151.149 338.788 151.149H340.575C341.006 151.149 341.354 151.501 341.354 151.929V153.716C341.355 153.818 341.335 153.92 341.296 154.015C341.257 154.11 341.2 154.197 341.127 154.27C341.055 154.343 340.969 154.4 340.874 154.44C340.779 154.479 340.677 154.499 340.575 154.499ZM334.38 154.499H332.593C332.387 154.499 332.189 154.416 332.043 154.27C331.897 154.124 331.814 153.926 331.813 153.719V151.929C331.813 151.501 332.165 151.149 332.593 151.149H334.38C334.808 151.149 335.16 151.501 335.16 151.929V153.716C335.16 153.818 335.14 153.92 335.102 154.015C335.063 154.11 335.005 154.197 334.933 154.27C334.861 154.343 334.774 154.4 334.679 154.44C334.585 154.479 334.483 154.499 334.38 154.499ZM328.186 154.499H326.399C326.192 154.499 325.993 154.417 325.846 154.271C325.699 154.125 325.617 153.927 325.616 153.719V151.929C325.617 151.722 325.7 151.524 325.846 151.377C325.993 151.231 326.192 151.149 326.399 151.149H328.186C328.614 151.149 328.965 151.501 328.965 151.929V153.716C328.965 153.923 328.883 154.122 328.737 154.268C328.591 154.415 328.393 154.498 328.186 154.499ZM334.603 168.51H332.817C332.61 168.509 332.412 168.427 332.266 168.281C332.12 168.134 332.038 167.937 332.037 167.73V165.944C332.037 165.512 332.388 165.164 332.817 165.164H334.603C335.032 165.164 335.383 165.516 335.383 165.944V167.73C335.383 167.832 335.363 167.934 335.324 168.029C335.285 168.123 335.228 168.209 335.155 168.282C335.083 168.354 334.997 168.412 334.902 168.451C334.807 168.49 334.706 168.51 334.603 168.51ZM328.409 168.51H326.622C326.416 168.509 326.218 168.427 326.072 168.281C325.926 168.134 325.843 167.937 325.842 167.73V165.944C325.842 165.512 326.194 165.164 326.622 165.164H328.409C328.841 165.164 329.192 165.516 329.192 165.944V167.73C329.19 167.937 329.107 168.134 328.96 168.28C328.814 168.426 328.616 168.509 328.409 168.51Z",
            fill: "#E1E4E5"
          }
        ),
        /* @__PURE__ */ jsx(
          "path",
          {
            d: "M166.248 340.288C165.016 340.288 163.936 340.072 163.008 339.64C162.08 339.192 161.36 338.568 160.848 337.768C160.336 336.968 160.08 336.032 160.08 334.96H162.6C162.616 335.568 162.76 336.128 163.032 336.64C163.32 337.136 163.728 337.536 164.256 337.84C164.8 338.128 165.464 338.272 166.248 338.272C166.92 338.272 167.496 338.16 167.976 337.936C168.472 337.712 168.848 337.408 169.104 337.024C169.36 336.624 169.488 336.168 169.488 335.656C169.488 335.064 169.352 334.576 169.08 334.192C168.808 333.808 168.44 333.496 167.976 333.256C167.528 333 167 332.776 166.392 332.584C165.8 332.392 165.176 332.184 164.52 331.96C163.192 331.528 162.2 330.968 161.544 330.28C160.904 329.592 160.584 328.696 160.584 327.592C160.584 326.648 160.808 325.832 161.256 325.144C161.704 324.44 162.328 323.896 163.128 323.512C163.944 323.112 164.904 322.912 166.008 322.912C167.096 322.912 168.048 323.112 168.864 323.512C169.68 323.912 170.32 324.464 170.784 325.168C171.248 325.872 171.48 326.696 171.48 327.64H168.936C168.936 327.208 168.824 326.784 168.6 326.368C168.376 325.952 168.04 325.616 167.592 325.36C167.144 325.088 166.592 324.952 165.936 324.952C165.392 324.936 164.904 325.024 164.472 325.216C164.04 325.408 163.704 325.688 163.464 326.056C163.224 326.424 163.104 326.864 163.104 327.376C163.104 327.888 163.208 328.304 163.416 328.624C163.64 328.928 163.96 329.192 164.376 329.416C164.792 329.64 165.272 329.848 165.816 330.04C166.376 330.216 166.992 330.416 167.664 330.64C168.496 330.912 169.232 331.248 169.872 331.648C170.528 332.032 171.04 332.536 171.408 333.16C171.792 333.768 171.984 334.552 171.984 335.512C171.984 336.344 171.768 337.12 171.336 337.84C170.904 338.56 170.264 339.152 169.416 339.616C168.568 340.064 167.512 340.288 166.248 340.288ZM179.71 340C178.942 340 178.278 339.88 177.718 339.64C177.158 339.4 176.726 339 176.422 338.44C176.118 337.88 175.966 337.12 175.966 336.16V329.944H173.878V327.904H175.966L176.254 324.88H178.366V327.904H181.798V329.944H178.366V336.184C178.366 336.872 178.51 337.344 178.798 337.6C179.086 337.84 179.582 337.96 180.286 337.96H181.678V340H179.71ZM188.453 340.288C187.461 340.288 186.637 340.12 185.98 339.784C185.325 339.448 184.837 339 184.517 338.44C184.197 337.864 184.037 337.248 184.037 336.592C184.037 335.792 184.245 335.112 184.661 334.552C185.077 333.976 185.669 333.536 186.437 333.232C187.205 332.928 188.125 332.776 189.197 332.776H192.341C192.341 332.072 192.237 331.488 192.029 331.024C191.821 330.56 191.509 330.216 191.093 329.992C190.693 329.752 190.181 329.632 189.557 329.632C188.837 329.632 188.221 329.808 187.709 330.16C187.197 330.496 186.877 331 186.749 331.672H184.349C184.445 330.824 184.733 330.104 185.213 329.512C185.709 328.904 186.341 328.44 187.109 328.12C187.877 327.784 188.693 327.616 189.557 327.616C190.693 327.616 191.645 327.816 192.413 328.216C193.181 328.616 193.757 329.184 194.141 329.92C194.541 330.64 194.741 331.504 194.741 332.512V340H192.653L192.461 337.96C192.285 338.28 192.077 338.584 191.837 338.872C191.597 339.16 191.309 339.408 190.973 339.616C190.653 339.824 190.277 339.984 189.845 340.096C189.429 340.224 188.965 340.288 188.453 340.288ZM188.909 338.344C189.421 338.344 189.885 338.24 190.301 338.032C190.717 337.824 191.069 337.544 191.357 337.192C191.661 336.824 191.885 336.416 192.029 335.968C192.189 335.504 192.277 335.032 192.293 334.552V334.48H189.437C188.749 334.48 188.189 334.568 187.757 334.744C187.341 334.904 187.037 335.128 186.845 335.416C186.653 335.704 186.557 336.04 186.557 336.424C186.557 336.824 186.645 337.168 186.821 337.456C187.013 337.728 187.285 337.944 187.637 338.104C187.989 338.264 188.413 338.344 188.909 338.344ZM197.804 340V327.904H199.964L200.18 330.184C200.452 329.64 200.804 329.184 201.236 328.816C201.668 328.432 202.172 328.136 202.748 327.928C203.34 327.72 204.012 327.616 204.764 327.616V330.16H203.9C203.404 330.16 202.932 330.224 202.484 330.352C202.036 330.464 201.636 330.664 201.284 330.952C200.948 331.24 200.684 331.632 200.492 332.128C200.3 332.624 200.204 333.24 200.204 333.976V340H197.804ZM211.96 340C211.192 340 210.528 339.88 209.968 339.64C209.408 339.4 208.976 339 208.672 338.44C208.368 337.88 208.216 337.12 208.216 336.16V329.944H206.128V327.904H208.216L208.504 324.88H210.616V327.904H214.048V329.944H210.616V336.184C210.616 336.872 210.76 337.344 211.048 337.6C211.336 337.84 211.832 337.96 212.536 337.96H213.928V340H211.96ZM222.955 340V323.2H225.787L231.475 334.552L237.139 323.2H239.995V340H237.595V327.4L232.387 337.648H230.539L225.355 327.424V340H222.955ZM248.838 340.288C247.686 340.288 246.662 340.024 245.766 339.496C244.87 338.968 244.166 338.232 243.654 337.288C243.158 336.344 242.91 335.248 242.91 334C242.91 332.72 243.158 331.608 243.654 330.664C244.166 329.704 244.87 328.96 245.766 328.432C246.662 327.888 247.702 327.616 248.886 327.616C250.07 327.616 251.086 327.88 251.934 328.408C252.782 328.936 253.438 329.64 253.902 330.52C254.366 331.384 254.598 332.344 254.598 333.4C254.598 333.56 254.59 333.736 254.574 333.928C254.574 334.104 254.566 334.304 254.55 334.528H244.662V332.824H252.198C252.15 331.816 251.814 331.032 251.19 330.472C250.566 329.896 249.79 329.608 248.862 329.608C248.206 329.608 247.606 329.76 247.062 330.064C246.518 330.352 246.078 330.784 245.742 331.36C245.422 331.92 245.262 332.632 245.262 333.496V334.168C245.262 335.064 245.422 335.824 245.742 336.448C246.078 337.056 246.518 337.52 247.062 337.84C247.606 338.144 248.198 338.296 248.838 338.296C249.606 338.296 250.238 338.128 250.734 337.792C251.23 337.456 251.598 337 251.838 336.424H254.238C254.03 337.16 253.678 337.824 253.182 338.416C252.686 338.992 252.07 339.448 251.334 339.784C250.614 340.12 249.782 340.288 248.838 340.288ZM261.945 340.288C260.921 340.288 260.025 340.12 259.257 339.784C258.489 339.448 257.881 338.976 257.433 338.368C256.985 337.76 256.713 337.048 256.617 336.232H259.065C259.145 336.616 259.297 336.968 259.521 337.288C259.761 337.608 260.081 337.864 260.481 338.056C260.897 338.248 261.385 338.344 261.945 338.344C262.473 338.344 262.905 338.272 263.241 338.128C263.593 337.968 263.849 337.76 264.009 337.504C264.169 337.232 264.249 336.944 264.249 336.64C264.249 336.192 264.137 335.856 263.913 335.632C263.705 335.392 263.385 335.208 262.953 335.08C262.537 334.936 262.033 334.808 261.441 334.696C260.881 334.6 260.337 334.472 259.809 334.312C259.297 334.136 258.833 333.92 258.417 333.664C258.017 333.408 257.697 333.088 257.457 332.704C257.217 332.304 257.097 331.816 257.097 331.24C257.097 330.552 257.281 329.936 257.649 329.392C258.017 328.832 258.537 328.4 259.209 328.096C259.897 327.776 260.705 327.616 261.633 327.616C262.977 327.616 264.057 327.936 264.873 328.576C265.689 329.216 266.169 330.12 266.313 331.288H263.985C263.921 330.744 263.681 330.328 263.265 330.04C262.849 329.736 262.297 329.584 261.609 329.584C260.921 329.584 260.393 329.72 260.025 329.992C259.657 330.264 259.473 330.624 259.473 331.072C259.473 331.36 259.577 331.616 259.785 331.84C259.993 332.064 260.297 332.256 260.697 332.416C261.113 332.56 261.617 332.696 262.209 332.824C263.057 332.984 263.817 333.184 264.489 333.424C265.161 333.664 265.697 334.016 266.097 334.48C266.497 334.944 266.697 335.608 266.697 336.472C266.713 337.224 266.521 337.888 266.121 338.464C265.737 339.04 265.185 339.488 264.465 339.808C263.761 340.128 262.921 340.288 261.945 340.288ZM274.203 340.288C273.179 340.288 272.283 340.12 271.515 339.784C270.747 339.448 270.139 338.976 269.691 338.368C269.243 337.76 268.971 337.048 268.875 336.232H271.323C271.403 336.616 271.555 336.968 271.779 337.288C272.019 337.608 272.339 337.864 272.739 338.056C273.155 338.248 273.643 338.344 274.203 338.344C274.731 338.344 275.163 338.272 275.499 338.128C275.851 337.968 276.107 337.76 276.267 337.504C276.427 337.232 276.507 336.944 276.507 336.64C276.507 336.192 276.395 335.856 276.171 335.632C275.963 335.392 275.643 335.208 275.211 335.08C274.795 334.936 274.291 334.808 273.699 334.696C273.139 334.6 272.595 334.472 272.067 334.312C271.555 334.136 271.091 333.92 270.675 333.664C270.275 333.408 269.955 333.088 269.715 332.704C269.475 332.304 269.355 331.816 269.355 331.24C269.355 330.552 269.539 329.936 269.907 329.392C270.275 328.832 270.795 328.4 271.467 328.096C272.155 327.776 272.963 327.616 273.891 327.616C275.235 327.616 276.315 327.936 277.131 328.576C277.947 329.216 278.427 330.12 278.571 331.288H276.243C276.179 330.744 275.939 330.328 275.523 330.04C275.107 329.736 274.555 329.584 273.867 329.584C273.179 329.584 272.651 329.72 272.283 329.992C271.915 330.264 271.731 330.624 271.731 331.072C271.731 331.36 271.835 331.616 272.043 331.84C272.251 332.064 272.555 332.256 272.955 332.416C273.371 332.56 273.875 332.696 274.467 332.824C275.315 332.984 276.075 333.184 276.747 333.424C277.419 333.664 277.955 334.016 278.355 334.48C278.755 334.944 278.955 335.608 278.955 336.472C278.971 337.224 278.779 337.888 278.379 338.464C277.995 339.04 277.443 339.488 276.723 339.808C276.019 340.128 275.179 340.288 274.203 340.288ZM285.788 340.288C284.796 340.288 283.972 340.12 283.316 339.784C282.66 339.448 282.172 339 281.852 338.44C281.532 337.864 281.372 337.248 281.372 336.592C281.372 335.792 281.58 335.112 281.996 334.552C282.412 333.976 283.004 333.536 283.772 333.232C284.54 332.928 285.46 332.776 286.532 332.776H289.676C289.676 332.072 289.572 331.488 289.364 331.024C289.156 330.56 288.844 330.216 288.428 329.992C288.028 329.752 287.516 329.632 286.892 329.632C286.172 329.632 285.556 329.808 285.044 330.16C284.532 330.496 284.212 331 284.084 331.672H281.684C281.78 330.824 282.068 330.104 282.548 329.512C283.044 328.904 283.676 328.44 284.444 328.12C285.212 327.784 286.028 327.616 286.892 327.616C288.028 327.616 288.98 327.816 289.748 328.216C290.516 328.616 291.092 329.184 291.476 329.92C291.876 330.64 292.076 331.504 292.076 332.512V340H289.988L289.796 337.96C289.62 338.28 289.412 338.584 289.172 338.872C288.932 339.16 288.644 339.408 288.308 339.616C287.988 339.824 287.612 339.984 287.18 340.096C286.764 340.224 286.3 340.288 285.788 340.288ZM286.244 338.344C286.756 338.344 287.22 338.24 287.636 338.032C288.052 337.824 288.404 337.544 288.692 337.192C288.996 336.824 289.22 336.416 289.364 335.968C289.524 335.504 289.612 335.032 289.628 334.552V334.48H286.772C286.084 334.48 285.524 334.568 285.092 334.744C284.676 334.904 284.372 335.128 284.18 335.416C283.988 335.704 283.892 336.04 283.892 336.424C283.892 336.824 283.98 337.168 284.156 337.456C284.348 337.728 284.62 337.944 284.972 338.104C285.324 338.264 285.748 338.344 286.244 338.344ZM300.06 345.568C298.956 345.568 297.98 345.424 297.132 345.136C296.284 344.864 295.628 344.44 295.164 343.864C294.7 343.288 294.468 342.584 294.468 341.752C294.468 341.32 294.564 340.88 294.756 340.432C294.948 340 295.26 339.584 295.692 339.184C296.124 338.784 296.708 338.424 297.444 338.104L298.788 339.184C297.972 339.488 297.42 339.848 297.132 340.264C296.86 340.696 296.724 341.112 296.724 341.512C296.724 341.992 296.868 342.392 297.156 342.712C297.444 343.032 297.836 343.272 298.332 343.432C298.844 343.592 299.42 343.672 300.06 343.672C300.684 343.672 301.228 343.584 301.692 343.408C302.156 343.232 302.516 342.984 302.772 342.664C303.028 342.344 303.156 341.968 303.156 341.536C303.156 341.024 302.964 340.592 302.58 340.24C302.196 339.904 301.46 339.704 300.372 339.64C299.46 339.576 298.684 339.488 298.044 339.376C297.42 339.264 296.884 339.128 296.436 338.968C296.004 338.808 295.636 338.632 295.332 338.44C295.044 338.248 294.796 338.048 294.588 337.84V337.288L296.988 334.816L298.932 335.488L296.316 337.912L296.82 336.832C296.996 336.944 297.164 337.056 297.324 337.168C297.484 337.264 297.7 337.352 297.972 337.432C298.244 337.512 298.612 337.584 299.076 337.648C299.54 337.712 300.148 337.776 300.9 337.84C301.988 337.92 302.86 338.112 303.516 338.416C304.188 338.72 304.676 339.128 304.98 339.64C305.284 340.152 305.436 340.76 305.436 341.464C305.436 342.152 305.244 342.808 304.86 343.432C304.492 344.056 303.908 344.568 303.108 344.968C302.324 345.368 301.308 345.568 300.06 345.568ZM300.06 336.28C299.036 336.28 298.164 336.088 297.444 335.704C296.74 335.32 296.196 334.8 295.812 334.144C295.444 333.488 295.26 332.76 295.26 331.96C295.26 331.144 295.444 330.416 295.812 329.776C296.196 329.12 296.748 328.6 297.468 328.216C298.188 327.816 299.052 327.616 300.06 327.616C301.068 327.616 301.924 327.816 302.628 328.216C303.348 328.6 303.892 329.12 304.26 329.776C304.644 330.416 304.836 331.144 304.836 331.96C304.836 332.76 304.644 333.488 304.26 334.144C303.892 334.8 303.348 335.32 302.628 335.704C301.924 336.088 301.068 336.28 300.06 336.28ZM300.06 334.36C300.844 334.36 301.468 334.16 301.932 333.76C302.396 333.344 302.628 332.744 302.628 331.96C302.628 331.176 302.396 330.584 301.932 330.184C301.468 329.768 300.844 329.56 300.06 329.56C299.276 329.56 298.644 329.768 298.164 330.184C297.684 330.584 297.444 331.176 297.444 331.96C297.444 332.744 297.684 333.344 298.164 333.76C298.644 334.16 299.276 334.36 300.06 334.36ZM302.028 329.8L301.452 327.904H306.42V329.56L302.028 329.8ZM308.995 340V327.904H311.395V340H308.995ZM310.219 325.624C309.755 325.624 309.371 325.48 309.067 325.192C308.779 324.904 308.635 324.536 308.635 324.088C308.635 323.656 308.779 323.304 309.067 323.032C309.371 322.744 309.755 322.6 310.219 322.6C310.667 322.6 311.043 322.744 311.347 323.032C311.651 323.304 311.803 323.656 311.803 324.088C311.803 324.536 311.651 324.904 311.347 325.192C311.043 325.48 310.667 325.624 310.219 325.624ZM314.827 340V327.904H316.987L317.131 329.968C317.515 329.248 318.059 328.68 318.763 328.264C319.467 327.832 320.275 327.616 321.187 327.616C322.147 327.616 322.971 327.808 323.659 328.192C324.347 328.576 324.883 329.16 325.267 329.944C325.651 330.712 325.843 331.68 325.843 332.848V340H323.443V333.088C323.443 331.968 323.195 331.12 322.699 330.544C322.203 329.968 321.483 329.68 320.539 329.68C319.915 329.68 319.355 329.832 318.859 330.136C318.363 330.424 317.963 330.856 317.659 331.432C317.371 332.008 317.227 332.712 317.227 333.544V340H314.827ZM333.833 345.568C332.729 345.568 331.753 345.424 330.905 345.136C330.057 344.864 329.401 344.44 328.937 343.864C328.473 343.288 328.241 342.584 328.241 341.752C328.241 341.32 328.337 340.88 328.529 340.432C328.721 340 329.033 339.584 329.465 339.184C329.897 338.784 330.481 338.424 331.217 338.104L332.561 339.184C331.745 339.488 331.193 339.848 330.905 340.264C330.633 340.696 330.497 341.112 330.497 341.512C330.497 341.992 330.641 342.392 330.929 342.712C331.217 343.032 331.609 343.272 332.105 343.432C332.617 343.592 333.193 343.672 333.833 343.672C334.457 343.672 335.001 343.584 335.465 343.408C335.929 343.232 336.289 342.984 336.545 342.664C336.801 342.344 336.929 341.968 336.929 341.536C336.929 341.024 336.737 340.592 336.353 340.24C335.969 339.904 335.233 339.704 334.145 339.64C333.233 339.576 332.457 339.488 331.817 339.376C331.193 339.264 330.657 339.128 330.209 338.968C329.777 338.808 329.409 338.632 329.105 338.44C328.817 338.248 328.569 338.048 328.361 337.84V337.288L330.761 334.816L332.705 335.488L330.089 337.912L330.593 336.832C330.769 336.944 330.937 337.056 331.097 337.168C331.257 337.264 331.473 337.352 331.745 337.432C332.017 337.512 332.385 337.584 332.849 337.648C333.313 337.712 333.921 337.776 334.673 337.84C335.761 337.92 336.633 338.112 337.289 338.416C337.961 338.72 338.449 339.128 338.753 339.64C339.057 340.152 339.209 340.76 339.209 341.464C339.209 342.152 339.017 342.808 338.633 343.432C338.265 344.056 337.681 344.568 336.881 344.968C336.097 345.368 335.081 345.568 333.833 345.568ZM333.833 336.28C332.809 336.28 331.937 336.088 331.217 335.704C330.513 335.32 329.969 334.8 329.585 334.144C329.217 333.488 329.033 332.76 329.033 331.96C329.033 331.144 329.217 330.416 329.585 329.776C329.969 329.12 330.521 328.6 331.241 328.216C331.961 327.816 332.825 327.616 333.833 327.616C334.841 327.616 335.697 327.816 336.401 328.216C337.121 328.6 337.665 329.12 338.033 329.776C338.417 330.416 338.609 331.144 338.609 331.96C338.609 332.76 338.417 333.488 338.033 334.144C337.665 334.8 337.121 335.32 336.401 335.704C335.697 336.088 334.841 336.28 333.833 336.28ZM333.833 334.36C334.617 334.36 335.241 334.16 335.705 333.76C336.169 333.344 336.401 332.744 336.401 331.96C336.401 331.176 336.169 330.584 335.705 330.184C335.241 329.768 334.617 329.56 333.833 329.56C333.049 329.56 332.417 329.768 331.937 330.184C331.457 330.584 331.217 331.176 331.217 331.96C331.217 332.744 331.457 333.344 331.937 333.76C332.417 334.16 333.049 334.36 333.833 334.36ZM335.801 329.8L335.225 327.904H340.193V329.56L335.801 329.8Z",
            fill: "black",
            fillOpacity: "0.5"
          }
        ),
        /* @__PURE__ */ jsxs("defs", { children: [
          /* @__PURE__ */ jsxs(
            "linearGradient",
            {
              id: "paint0_linear_5056_16950",
              x1: "172.889",
              y1: "351.122",
              x2: "366.983",
              y2: "-120.792",
              gradientUnits: "userSpaceOnUse",
              children: [
                /* @__PURE__ */ jsx("stop", { stopColor: "white" }),
                /* @__PURE__ */ jsx("stop", { offset: "1", stopColor: "#EEEEEE" })
              ]
            }
          ),
          /* @__PURE__ */ jsxs(
            "linearGradient",
            {
              id: "paint1_linear_5056_16950",
              x1: "277.666",
              y1: "334.942",
              x2: "405.381",
              y2: "86.4568",
              gradientUnits: "userSpaceOnUse",
              children: [
                /* @__PURE__ */ jsx("stop", { stopColor: "white" }),
                /* @__PURE__ */ jsx("stop", { offset: "1", stopColor: "#EEEEEE" })
              ]
            }
          )
        ] })
      ]
    }
  );
};
const HorizontalDotsIcon = ({ className }) => {
  return /* @__PURE__ */ jsxs("svg", { width: 14, height: 14, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
    /* @__PURE__ */ jsx("path", { d: "M5 10C6.10457 10 7 10.8954 7 12C7 13.1046 6.10457 14 5 14C3.89543 14 3 13.1046 3 12C3 10.8954 3.89543 10 5 10Z", fill: "#000000" }),
    /* @__PURE__ */ jsx("path", { d: "M12 10C13.1046 10 14 10.8954 14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12C10 10.8954 10.8954 10 12 10Z", fill: "#000000" }),
    /* @__PURE__ */ jsx("path", { d: "M21 12C21 10.8954 20.1046 10 19 10C17.8954 10 17 10.8954 17 12C17 13.1046 17.8954 14 19 14C20.1046 14 21 13.1046 21 12Z", fill: "#000000" })
  ] });
};
function EditPrice() {
  return /* @__PURE__ */ jsxs(
    "svg",
    {
      viewBox: "0 0 1024 1024",
      xmlns: "http://www.w3.org/2000/svg",
      fill: "#000000",
      children: [
        /* @__PURE__ */ jsx("g", { id: "SVGRepo_bgCarrier", strokeWidth: "0" }),
        /* @__PURE__ */ jsx(
          "g",
          {
            id: "SVGRepo_tracerCarrier",
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ),
        /* @__PURE__ */ jsx("g", { id: "SVGRepo_iconCarrier", children: /* @__PURE__ */ jsx(
          "path",
          {
            d: "m199.04 672.64 193.984 112 224-387.968-193.92-112-224 388.032zm-23.872 60.16 32.896 148.288 144.896-45.696L175.168 732.8zM455.04 229.248l193.92 112 56.704-98.112-193.984-112-56.64 98.112zM104.32 708.8l384-665.024 304.768 175.936L409.152 884.8h.064l-248.448 78.336L104.32 708.8zm384 254.272v-64h448v64h-448z",
            fill: "#000000"
          }
        ) })
      ]
    }
  );
}
const MessageAttachment = ({
  attachmentName,
  downloadUrl,
  formattedTime,
  userReadStatus
}) => {
  const allSeen = userReadStatus?.length > 0 && userReadStatus.every((r) => r.is_seen);
  return /* @__PURE__ */ jsxs("div", { className: "p-2 relative bg-blue-100 max-w-full min-w-28", children: [
    /* @__PURE__ */ jsx("div", { className: "flex p-1 bg-gray-100 bg-opacity-50 mb-2", children: /* @__PURE__ */ jsxs(
      "a",
      {
        href: downloadUrl,
        target: "_blank",
        rel: "noopener noreferrer",
        className: "flex items-center gap-2",
        children: [
          /* @__PURE__ */ jsx(File, { className: "size-4" }),
          sliceFilename(attachmentName, 25)
        ]
      }
    ) }),
    /* @__PURE__ */ jsxs("div", { className: "text-[10px] absolute -bottom-1 right-1 flex items-center py-1", children: [
      formattedTime,
      allSeen ? /* @__PURE__ */ jsx(CheckCheck, { className: "w-4 h-4 text-blue-500" }) : /* @__PURE__ */ jsx(Check, { className: "w-4 h-4 text-gray-500" })
    ] })
  ] });
};
const MessageText = ({ message, formattedTime, userReadStatus }) => {
  const allSeen = userReadStatus?.length > 0 && userReadStatus.every((r) => r.is_seen);
  return /* @__PURE__ */ jsxs("div", { className: "bg-blue-100 border-[1px] max-w-full min-w-28 relative border-zinc-300 p-2", children: [
    /* @__PURE__ */ jsx("div", { className: "text-md mb-2", children: /* @__PURE__ */ jsx("ul", { className: "mb-0", children: message.split("\n").map((line, index) => /* @__PURE__ */ jsx("li", { className: "break-words", children: /* @__PURE__ */ jsx(
      Linkify,
      {
        options: {
          target: "_blank",
          className: "text-blue-600 hover:underline"
        },
        children: line.trim()
      }
    ) }, index)) }) }),
    /* @__PURE__ */ jsx("div", { className: "text-[10px] absolute right-1 -bottom-1", children: /* @__PURE__ */ jsxs("div", { className: "mt-1 flex items-center gap-1 pb-1", children: [
      /* @__PURE__ */ jsx("span", { children: formattedTime }),
      allSeen ? /* @__PURE__ */ jsx(CheckCheck, { className: "w-4 h-4 text-blue-500" }) : /* @__PURE__ */ jsx(Check, { className: "w-4 h-4 text-gray-500" })
    ] }) })
  ] });
};
const ChatMessage = ({ messageData, refetch, onEdit }) => {
  const [open, setOpen] = useState(false);
  const currentTime = dayjs();
  const messageTime = dayjs(messageData.created_at);
  const timeDifferenceInMinutes = currentTime.diff(messageTime, "minute");
  const canEditOrDelete = timeDifferenceInMinutes <= 13;
  const formattedTime = messageTime.format("hh:mm a");
  const { mutateAsync: mutateDeleteChat, isPending: deletingChat } = useMutation({
    mutationKey: ["delete-chat-message"],
    mutationFn: async (chatId) => {
      const response = await deleteSingleCaseChatAPI(chatId);
      return response?.data;
    },
    onSuccess: () => {
      refetch();
    },
    onError: (error) => {
      toast.error(
        `Failed to delete message: ${error.message || "Unknown error"}`,
        {
          action: {
            label: "✕",
            onClick: () => toast.dismiss()
          }
        }
      );
    }
  });
  const handleDelete = () => {
    if (messageData.id) {
      toast.promise(mutateDeleteChat(messageData.id), {
        loading: "Message deleting...",
        success: "Message deleted successfully",
        action: {
          label: "✕",
          onClick: () => toast.dismiss()
        }
      });
    }
  };
  const handleEdit = () => {
    if (messageData.id) {
      onEdit(messageData.id, messageData.message, messageData.created_at);
    }
  };
  return /* @__PURE__ */ jsxs("div", { className: "flex items-start justify-self-end group justify-end gap-2 w-3/5 text-sm", children: [
    /* @__PURE__ */ jsx("div", { children: canEditOrDelete && /* @__PURE__ */ jsxs(Popover, { open, onOpenChange: setOpen, children: [
      /* @__PURE__ */ jsx(PopoverTrigger, { children: /* @__PURE__ */ jsx("div", { className: "-mt-1 cursor-pointer", children: /* @__PURE__ */ jsx(HorizontalDotsIcon, {}) }) }),
      /* @__PURE__ */ jsxs(
        PopoverContent,
        {
          side: "left",
          className: "flex flex-col w-fit px-1 py-1 items-start mt-14 bg-white border border-gray-300",
          children: [
            /* @__PURE__ */ jsx(
              Button,
              {
                variant: "ghost",
                size: "sm",
                onClick: () => {
                  handleDelete();
                  setOpen(false);
                },
                disabled: deletingChat,
                className: " bg-transparent hover:bg-gray-100 w-full",
                children: deletingChat ? "Deleting..." : /* @__PURE__ */ jsxs("div", { className: "flex gap-1 text-xs", children: [
                  /* @__PURE__ */ jsx(DeleteStrokeIcon, {}),
                  " Delete"
                ] })
              }
            ),
            messageData.type === "MESSAGES" && /* @__PURE__ */ jsx(
              Button,
              {
                variant: "ghost",
                size: "sm",
                onClick: () => {
                  handleEdit();
                  setOpen(false);
                },
                className: "p-1 bg-transparent hover:bg-gray-100 w-full",
                children: /* @__PURE__ */ jsxs("div", { className: "flex gap-1 text-xs", children: [
                  " ",
                  /* @__PURE__ */ jsx(EditPrice, {}),
                  " Edit"
                ] })
              }
            )
          ]
        }
      )
    ] }) }),
    messageData.type === "MESSAGES" && /* @__PURE__ */ jsx(
      MessageText,
      {
        message: messageData.message,
        formattedTime,
        userReadStatus: messageData?.user_read_status
      }
    ),
    messageData.type === "ATTACHMENT" && messageData?.attachment_key && /* @__PURE__ */ jsx(
      MessageAttachment,
      {
        attachmentName: messageData.attachment_name,
        downloadUrl: messageData.download_url,
        formattedTime,
        userReadStatus: messageData?.user_read_status
      }
    )
  ] });
};
function ChatSendIcon({ className }) {
  return /* @__PURE__ */ jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      width: "20",
      height: "20",
      viewBox: "0 0 20 20",
      fill: "none",
      className,
      children: /* @__PURE__ */ jsx(
        "path",
        {
          d: "M17.4898 8.9061L4.36484 1.4147C4.1436 1.29059 3.88983 1.23673 3.63726 1.26028C3.38468 1.28383 3.14525 1.38366 2.95076 1.54653C2.75628 1.70939 2.61594 1.92757 2.54841 2.17209C2.48087 2.4166 2.48933 2.67588 2.57265 2.91548L4.99452 9.98345C4.99421 9.98604 4.99421 9.98866 4.99452 9.99126C4.99409 9.99384 4.99409 9.99648 4.99452 9.99907L2.57265 17.0827C2.50592 17.2711 2.48538 17.4729 2.51274 17.6709C2.5401 17.869 2.61458 18.0576 2.72991 18.2209C2.84525 18.3842 2.99808 18.5175 3.17557 18.6095C3.35307 18.7016 3.55005 18.7497 3.74999 18.7499C3.96692 18.7493 4.18004 18.6928 4.36874 18.5858L17.4867 11.0819C17.6802 10.9735 17.8414 10.8156 17.9537 10.6243C18.066 10.4331 18.1254 10.2154 18.1258 9.99357C18.1262 9.77178 18.0676 9.55388 17.956 9.36222C17.8443 9.17057 17.6837 9.01206 17.4906 8.90298L17.4898 8.9061ZM3.74999 17.4999V17.4928L6.10468 10.6249H10.625C10.7908 10.6249 10.9497 10.559 11.0669 10.4418C11.1841 10.3246 11.25 10.1656 11.25 9.99985C11.25 9.83409 11.1841 9.67512 11.0669 9.55791C10.9497 9.4407 10.7908 9.37485 10.625 9.37485H6.11093L3.75468 2.50923L3.74999 2.49985L16.875 9.98657L3.74999 17.4999Z",
          fill: "currentColor"
        }
      )
    }
  );
}
const ChatFileUpload = ({
  sendAttachment,
  setLoading2
}) => {
  const onDrop = (acceptedFiles) => {
    const file = acceptedFiles[0];
    if (file.size > 50 * 1024 * 1024) {
      toast.error("File size must be less than 50MB.", {
        action: {
          label: "✕",
          onClick: () => {
            toast.dismiss();
          }
        }
      });
      return;
    }
    handleFileUpload(acceptedFiles[0]);
  };
  const onDropRejected = (rejectedFiles) => {
    const message = rejectedFiles.map(
      ({ file, errors }) => errors.map((error) => {
        if (error.code === "file-invalid-type") {
          return `File "${file.name}" has an unsupported type.`;
        }
        return `File "${file.name}" was rejected. Reason: ${error.message}`;
      })
    ).flat().join(", ");
    toast.error(message, {
      action: {
        label: "✕",
        onClick: () => {
          toast.dismiss();
        }
      }
    });
  };
  const { getRootProps, getInputProps, open } = useDropzone({
    onDrop,
    onDropRejected,
    accept: {
      "image/jpeg": [".jpeg", ".jpg"],
      "image/png": [".png"],
      "image/webp": [".webp"],
      "application/pdf": [".pdf"]
    },
    multiple: false,
    noClick: true
  });
  const { mutate: getPresignedUrls, isPending: uploadFile } = useMutation({
    mutationFn: async ({ file }) => {
      setLoading2 && setLoading2(true);
      const fileType = file.name.split(".").pop();
      const { data } = await fileUploadAPI({
        file_name: file.name,
        file_type: fileType,
        file_size: file.size
      });
      const { target_url, file_key, file_type } = data?.data;
      if (!target_url) {
        throw new Error("Presigned URL is missing");
      }
      await uploadTos3({ url: target_url, file });
      return {
        file_name: file.name,
        file_type: fileType,
        file_size: file.size,
        key: file_key
      };
    },
    onSuccess: async ({ key, file_name, file_type, file_size }) => {
      sendAttachment(key, file_name, file_type, file_size);
      setLoading2 && setLoading2(false);
    },
    onError: () => {
      setLoading2 && setLoading2(false);
    }
  });
  const handleFileUpload = (file) => {
    toast.promise(
      new Promise((resolve, reject) => {
        getPresignedUrls(
          { file },
          {
            onSuccess: (data) => resolve(data),
            onError: (error) => reject(error)
          }
        );
      }),
      {
        loading: "Uploading file...",
        success: () => {
          return "File uploaded successfully";
        },
        error: (err) => {
          if (err.response?.status === 422 && err.response?.data?.errData?.file_size) {
            return err.response.data.errData.file_size[0];
          }
          return "Failed to upload file";
        },
        action: {
          label: "✕",
          onClick: () => toast.dismiss()
        }
      }
    );
  };
  const uploadTos3 = async ({ url, file }) => {
    try {
      const response = await uploadToS3API(url, file);
      if (response.status !== 200 && response.status !== 201) {
        throw response;
      }
    } catch (error) {
      throw error;
    }
  };
  return /* @__PURE__ */ jsxs("div", { id: "upload-attachments", className: "w-full", children: [
    /* @__PURE__ */ jsx("div", { className: " w-full py-0 flex justify-between items-center", children: /* @__PURE__ */ jsx(
      Button,
      {
        type: "button",
        onClick: open,
        variant: "default",
        size: "default",
        className: "h-fit w-full px-0 py-0 text-sm bg-transparent rounded-none hover:bg-transparent text-white",
        children: /* @__PURE__ */ jsx(Paperclip, { className: "stroke-black" })
      }
    ) }),
    /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsx("div", { ...getRootProps(), className: "hidden", children: /* @__PURE__ */ jsx("input", { ...getInputProps() }) }) })
  ] });
};
const ChatSend = ({
  message,
  onMessageChange,
  sendMessage,
  isPending,
  isEditing,
  onCancelEdit,
  disabled,
  sendAttachment,
  refetch
}) => {
  const [isUploading, setIsUploading] = useState(false);
  const hasMessage = message && message.trim() !== "";
  const showCancelButton = hasMessage && isEditing;
  const showSendButton = hasMessage;
  let rightPadding = "pr-3";
  if (showSendButton && showCancelButton) {
    rightPadding = "pr-20";
  } else if (showSendButton) {
    rightPadding = "pr-12";
  }
  const handleKeyDown = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };
  const handleFileUpload = (attachmentKey, fileName, file_type, file_size) => {
    sendAttachment(attachmentKey, fileName, file_type, file_size);
  };
  return /* @__PURE__ */ jsx("div", { className: "w-full bg-indigo-50  ", children: /* @__PURE__ */ jsx("div", { className: "p-0  px-2  border-gray-200", children: /* @__PURE__ */ jsxs("div", { className: "relative flex items-center bg-white rounded-lg border border-gray-300 transition-colors min-h-[48px]", children: [
    /* @__PURE__ */ jsx("div", { className: "flex-shrink-0 pl-2", children: /* @__PURE__ */ jsx(
      Button,
      {
        className: "p-1 h-8 w-8 bg-transparent hover:bg-gray-100 text-gray-500 transition-all duration-300",
        disabled: isUploading || disabled,
        children: /* @__PURE__ */ jsx(
          ChatFileUpload,
          {
            refetch,
            sendAttachment: handleFileUpload,
            loading2: isUploading,
            setLoading2: setIsUploading
          }
        )
      }
    ) }),
    /* @__PURE__ */ jsxs("div", { className: "flex-1 relative", children: [
      /* @__PURE__ */ jsx(
        Textarea,
        {
          className: `border-0 bg-transparent resize-none h-10 py-2 pl-2 ${rightPadding} focus-visible:ring-0 focus-visible:ring-offset-0 placeholder-gray-500 leading-5`,
          placeholder: "Type a message...",
          value: message || "",
          onChange: (e) => onMessageChange(e.target.value),
          onKeyDown: handleKeyDown
        }
      ),
      /* @__PURE__ */ jsxs("div", { className: "absolute right-2 top-1/2 transform -translate-y-1/2 flex items-center gap-1", children: [
        showCancelButton && /* @__PURE__ */ jsx(
          Button,
          {
            className: "h-8 w-8 p-0 bg-transparent hover:bg-gray-100 text-gray-500 hover:text-red-500 transition-all duration-300",
            onClick: onCancelEdit,
            disabled: isPending || disabled,
            children: /* @__PURE__ */ jsx(X, { className: "h-4 w-4" })
          }
        ),
        showSendButton && /* @__PURE__ */ jsx(
          Button,
          {
            type: "submit",
            className: "h-9 w-9 p-0 bg-transparent  text-black/60 hover:text-black transition-all duration-300 cursor-pointer",
            onClick: () => sendMessage(),
            disabled: isUploading || isPending || disabled,
            children: /* @__PURE__ */ jsx(ChatSendIcon, { className: "h-6 w-6 stroke-current" })
          }
        )
      ] })
    ] })
  ] }) }) });
};
dayjs.extend(customParseFormat);
const ServiceChat = () => {
  const [message, setMessage] = useState(null);
  const [editingChatId, setEditingChatId] = useState(null);
  const [editingMessage, setEditingMessage] = useState(null);
  const queryClient = useQueryClient();
  const chatContainerRef = useRef(null);
  const { service_id } = useParams({ strict: false });
  const userDetails = useStore(userStore, (state) => state["user"]);
  const userType = userDetails?.id;
  const messagesEndRef = useRef(null);
  const [createAt, setCreatedAt] = useState();
  const [fileName, setFileName] = useState("");
  const [attachmentKey, setAttachementKey] = useState("");
  const [fileType, setFileType] = useState("");
  const [fileSize, setFileSize] = useState(0);
  let hasShownUnreadTag = false;
  const [shouldScrollToBottom, setShouldScrollToBottom] = useState(true);
  const handleMessageChange = (newMessage) => {
    setMessage(newMessage);
    if (editingChatId) {
      setEditingMessage(newMessage);
    }
  };
  const createNewMessage = () => {
    createNewChatItem({
      type: "MESSAGES",
      message: message || "",
      fileName: null,
      attachmentKey: null,
      file_type: null,
      file_size: null
    });
  };
  const createNewAttachment = (attachmentKey2, fileName2, file_type, file_size) => {
    createNewChatItem({
      type: "ATTACHMENT",
      message: null,
      fileName: fileName2,
      attachmentKey: attachmentKey2,
      file_type,
      file_size
    });
  };
  const createNewChatItem = ({
    type,
    message: message2,
    fileName: fileName2,
    attachmentKey: attachmentKey2,
    file_type,
    file_size
  }) => {
    const case_id = service_id;
    if (type === "MESSAGES" && (!message2 || message2.trim().length === 0)) {
      toast("Message cannot be empty or whitespace.", {
        action: {
          label: "✕",
          onClick: () => toast.dismiss()
        }
      });
      return;
    }
    if (type === "ATTACHMENT" && !attachmentKey2) {
      toast("Attachment is required.", {
        action: {
          label: "✕",
          onClick: () => toast.dismiss()
        }
      });
      return;
    }
    const tempMessage = {
      id: `temp-${Date.now()}`,
      user_id: userType,
      created_at: (/* @__PURE__ */ new Date()).toISOString(),
      user_read_status: [],
      user: {
        first_name: userDetails?.first_name,
        last_name: userDetails?.last_name,
        profile_pic: userDetails?.profile_pic
      },
      status: "sending",
      type
    };
    if (type === "MESSAGES") {
      tempMessage.message = message2;
    } else {
      tempMessage.attachment_key = attachmentKey2;
      tempMessage.attachment_name = fileName2;
      tempMessage.message = "";
      tempMessage.file_type = file_type;
      tempMessage.file_size = file_size;
    }
    queryClient.setQueryData(
      ["getSingleCaseChatDetails", service_id],
      (oldData) => {
        if (!oldData) {
          return {
            pages: [{ data: [tempMessage], nextCursor: null }]
          };
        }
        const newPages = oldData.pages.map((page, index) => {
          if (index === 0) {
            return {
              ...page,
              data: [tempMessage, ...page.data]
            };
          }
          return page;
        });
        return {
          ...oldData,
          pages: newPages
        };
      }
    );
    setMessage("");
    setFileName("");
    setAttachementKey("");
    setFileType("");
    setFileSize(0);
    const payload = {
      case_id: case_id ? Number(case_id) : 0,
      type
    };
    if (type === "MESSAGES") {
      payload.message = message2;
    } else {
      payload.attachment_key = attachmentKey2;
      payload.attachment_name = fileName2;
      payload.file_type = file_type;
      payload.file_size = file_size;
    }
    mutateCreateChat(payload);
  };
  const updateMessage = () => {
    let case_id = service_id;
    if (!message || message?.trim()?.length === 0) {
      toast("Message cannot be empty or whitespace.", {
        action: {
          label: "✕",
          onClick: () => toast.dismiss()
        }
      });
      return;
    }
    if (editingChatId && createAt) {
      const tempUpdatedMessage = {
        id: editingChatId,
        user_id: userType,
        message,
        created_at: createAt,
        user_read_status: [],
        user: {
          first_name: userDetails?.first_name,
          last_name: userDetails?.last_name,
          profile_pic: userDetails?.profile_pic
        },
        status: "updating",
        type: "MESSAGES"
      };
      queryClient.setQueryData(
        ["getSingleCaseChatDetails", service_id],
        (oldData) => {
          if (!oldData) return oldData;
          const newPages = oldData.pages.map((page) => ({
            ...page,
            data: page.data.map(
              (msg) => msg.id === editingChatId ? tempUpdatedMessage : msg
            )
          }));
          return { ...oldData, pages: newPages };
        }
      );
      const payload = {
        case_id: case_id ? Number(case_id) : 0,
        message: message || "",
        type: "MESSAGES"
      };
      if (!updateChatPending) {
        mutateUpdateChat({ chatId: editingChatId, payload });
        setMessage("");
        setEditingChatId(null);
        setEditingMessage(null);
      }
    }
  };
  const { mutate: mutateCreateChat, isPending: isPendingCreateMessage } = useMutation({
    mutationKey: ["create-new-chat"],
    mutationFn: async (data) => {
      const response = await createChatAPI(data);
      return response?.data;
    },
    onMutate: async (newMessage) => {
      await queryClient.cancelQueries({
        queryKey: ["getSingleCaseChatDetails", service_id]
      });
      const previousMessages = queryClient.getQueryData([
        "getSingleCaseChatDetails",
        service_id
      ]);
      return { previousMessages };
    },
    onError: (err, newMessage, context) => {
      queryClient.setQueryData(
        ["getSingleCaseChatDetails", service_id],
        context?.previousMessages
      );
      toast.error("Failed to send message", {
        action: {
          label: "✕",
          onClick: () => toast.dismiss()
        }
      });
    },
    onSettled: () => {
      queryClient.invalidateQueries({
        queryKey: ["getSingleCaseChatDetails", service_id]
      });
    },
    onSuccess: (data) => {
      setEditingChatId(null);
      setEditingMessage(null);
    }
  });
  const { mutate: mutateUpdateChat, isPending: updateChatPending } = useMutation({
    mutationKey: ["update-chat-message"],
    mutationFn: async ({
      chatId,
      payload
    }) => {
      const response = await updateChatAPI({ chatId, payload });
      return response?.data;
    },
    onSuccess: async (data) => {
      setEditingChatId(null);
      setEditingMessage(null);
      refetch();
    },
    onError: (error) => {
      toast.error("Failed to update message", {
        action: {
          label: "✕",
          onClick: () => toast.dismiss()
        }
      });
    }
  });
  const { mutate: chatViewMessage, isPending: chatViewMessageLoading } = useMutation({
    mutationFn: async (payload) => {
      const response = await chatViewMessageAPI(payload);
      return response?.data;
    },
    onSuccess: () => {
    },
    onError: () => {
    }
  });
  const fetchChatMessages = async ({ pageParam = 1 }) => {
    if (!service_id) return { data: [], nextCursor: null };
    try {
      const response = await getSingleCaseChatDetailsAPI(service_id, {
        page: pageParam,
        page_size: 15
      });
      if (response.status === 200 || response.status === 201) {
        const { data } = response?.data;
        const unreadMessages = data.records?.filter(
          (msg) => msg.user_read_status?.some(
            (status) => status.user_id === userType && !status.is_seen
          )
        ).map((msg) => msg.id);
        if (unreadMessages?.length > 0) {
          const payload = { case_id: service_id, chat_ids: unreadMessages };
          chatViewMessage(payload);
        }
        return {
          data: data.records || [],
          nextCursor: data?.pagination_info?.next_page || null,
          prevCursor: pageParam > 1 ? pageParam - 1 : null
        };
      }
      throw new Error("Failed to fetch messages");
    } catch (err) {
      throw err;
    }
  };
  const {
    isLoading,
    data: chatPages,
    fetchNextPage,
    hasNextPage,
    isFetchingNextPage,
    refetch
  } = useInfiniteQuery({
    queryKey: ["getSingleCaseChatDetails", service_id],
    queryFn: fetchChatMessages,
    initialPageParam: 1,
    getNextPageParam: (lastPage) => lastPage?.nextCursor ?? void 0,
    enabled: !!service_id,
    refetchOnWindowFocus: false
  });
  const observer = useRef(null);
  const firstChatRef = useCallback(
    (node) => {
      if (isFetchingNextPage) return;
      if (observer.current) observer.current.disconnect();
      observer.current = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting && hasNextPage) {
          fetchNextPage();
        }
      });
      if (node) observer.current.observe(node);
    },
    [isFetchingNextPage, hasNextPage, fetchNextPage]
  );
  const handleSendOrUpdate = () => {
    if (editingChatId) {
      updateMessage();
    } else {
      createNewMessage();
    }
    setShouldScrollToBottom(true);
  };
  const handleCancelEdit = () => {
    setEditingChatId(null);
    setEditingMessage(null);
    setMessage(null);
  };
  const allMessages = chatPages?.pages?.flatMap((page) => page.data) || [];
  const filteredMessages = allMessages.filter((message2) => {
    if (message2.user_id === userType) return true;
    return message2.user_read_status?.some(
      (status) => status.user_id === userType
    );
  });
  const groupedMessages = filteredMessages.reduce(
    (acc, message2) => {
      const messageDate = dayjs(message2?.created_at).format("DD-MM-YYYY");
      if (!acc[messageDate]) {
        acc[messageDate] = { date: messageDate, messages: [] };
      }
      acc[messageDate].messages.push(message2);
      return acc;
    },
    {}
  );
  const sortedGroupedMessages = Object.values(groupedMessages || {})?.sort((a, b) => {
    const dateFormat = "DD-MM-YYYY";
    const parsedDateA = dayjs(a.date.trim(), dateFormat, true);
    const parsedDateB = dayjs(b.date.trim(), dateFormat, true);
    const dateA = parsedDateA.isValid() ? parsedDateA.valueOf() : 0;
    const dateB = parsedDateB.isValid() ? parsedDateB.valueOf() : 0;
    return dateA - dateB;
  })?.map((group) => {
    const messageDate = dayjs(group.date, "DD-MM-YYYY");
    const today = dayjs().format("DD-MM-YYYY");
    const yesterday = dayjs().subtract(1, "day").format("DD-MM-YYYY");
    const formattedDate = group.date === today ? "Today" : group.date === yesterday ? "Yesterday" : messageDate.format("DD MMM YYYY");
    return {
      ...group,
      date: formattedDate,
      messages: group.messages.sort((a, b) => {
        const timeA = new Date(a.created_at).getTime();
        const timeB = new Date(b.created_at).getTime();
        return timeA - timeB;
      })
    };
  }).filter((group) => group.messages.length > 0);
  const getColor = (name) => {
    let hash = 0;
    for (let i = 0; i < name.length; i++) {
      hash = hash * 31 + name.charCodeAt(i) & 4294967295;
    }
    const index = Math.abs(hash % colors.length);
    return colors[index];
  };
  useEffect(() => {
    if (chatContainerRef.current && isFetchingNextPage) {
      const scrollContainer = chatContainerRef.current;
      const scrollHeightBefore = scrollContainer.scrollHeight;
      return () => {
        if (scrollContainer) {
          const scrollHeightAfter = scrollContainer.scrollHeight;
          scrollContainer.scrollTop = scrollHeightAfter - scrollHeightBefore;
        }
      };
    }
  }, [isFetchingNextPage]);
  useEffect(() => {
    if (chatContainerRef.current && shouldScrollToBottom) {
      const scrollContainer = chatContainerRef.current;
      scrollContainer.scrollTop = scrollContainer.scrollHeight;
      setShouldScrollToBottom(false);
    }
  }, [chatPages, shouldScrollToBottom]);
  useEffect(() => {
    if (!isLoading) setShouldScrollToBottom(true);
  }, [isLoading]);
  return /* @__PURE__ */ jsxs("div", { className: "border border-gray-300 ", children: [
    /* @__PURE__ */ jsx(TabValuesForViewCase, {}),
    /* @__PURE__ */ jsx("div", { className: "h-[calc(100vh-155px)] relative bg-indigo-50 bg-opacity-50", children: isLoading ? /* @__PURE__ */ jsx(
      LoadingComponent,
      {
        loading: isLoading,
        message: "Loading Chats...",
        className: "bg-white"
      }
    ) : /* @__PURE__ */ jsxs(Fragment, { children: [
      isFetchingNextPage && /* @__PURE__ */ jsx("div", { className: "text-center text-xs text-gray-500 mt-2", children: "Loading more Chats..." }),
      /* @__PURE__ */ jsxs(
        "div",
        {
          ref: chatContainerRef,
          className: "h-[calc(100%-60px)] overflow-y-auto",
          children: [
            sortedGroupedMessages?.length > 0 ? /* @__PURE__ */ jsx(Fragment, { children: sortedGroupedMessages?.map((group, groupIndex) => {
              return /* @__PURE__ */ jsxs("div", { className: "px-8 py-4", children: [
                /* @__PURE__ */ jsx("p", { className: "text-center mb-6 text-sm text-zinc-400 font-medium tracking-wide", children: group.date }),
                /* @__PURE__ */ jsx("div", { className: "flex flex-col gap-4", children: group.messages?.map((data, index) => {
                  const fullName = `${data?.user?.first_name || ""} ${data?.user?.last_name || ""}`?.trim();
                  const isUnread = data.user_read_status?.some(
                    (item) => item.is_seen === false && item.user_id === userType
                  );
                  let unreadTag = null;
                  if (!hasShownUnreadTag && isUnread) {
                    hasShownUnreadTag = true;
                    unreadTag = /* @__PURE__ */ jsxs("div", { className: "relative flex items-center", children: [
                      /* @__PURE__ */ jsx("div", { className: "flex-1 border-t border-gray-300" }),
                      /* @__PURE__ */ jsx("span", { className: "px-3 text-red-500 text-xs animate-bounce", children: "New" }),
                      /* @__PURE__ */ jsx("div", { className: "flex-1 border-t border-gray-300" })
                    ] });
                  }
                  return /* @__PURE__ */ jsxs("div", { children: [
                    unreadTag,
                    /* @__PURE__ */ jsx(
                      "div",
                      {
                        ref: groupIndex === 0 && index === 0 ? firstChatRef : null,
                        children: data.user_id !== userType ? /* @__PURE__ */ jsx("div", { children: data.user_read_status?.filter(
                          (item) => item.user_id === userType
                        )?.map(
                          (filteredItem, idx) => /* @__PURE__ */ jsxs(
                            "div",
                            {
                              className: "justify-self-start flex items-start justify-start w-4/5 gap-x-2 text-sm text-gray-800",
                              children: [
                                /* @__PURE__ */ jsx(Avatar, { className: "w-8 h-8 bg-white flex items-center justify-center", children: data?.user?.profile_pic ? /* @__PURE__ */ jsx(
                                  "img",
                                  {
                                    src: data?.user?.profile_pic,
                                    alt: "Profile",
                                    className: "object-cover"
                                  }
                                ) : /* @__PURE__ */ jsx(DefaultUserIcon, { className: "w-4 h-4" }) }),
                                /* @__PURE__ */ jsxs("div", { className: "p-2 relative bg-white border-[1px] max-w-[50%]  min-w-28 space-y-0.5 border-zinc-300", children: [
                                  /* @__PURE__ */ jsxs("div", { className: "text-xs font-semibold", children: [
                                    "~",
                                    " ",
                                    /* @__PURE__ */ jsxs(
                                      "span",
                                      {
                                        style: {
                                          color: getColor(fullName)
                                        },
                                        children: [
                                          data?.user?.first_name,
                                          " ",
                                          data?.user?.last_name
                                        ]
                                      }
                                    )
                                  ] }),
                                  data.message && /* @__PURE__ */ jsx("div", { className: "flex gap-2 justify-between", children: /* @__PURE__ */ jsx("div", { className: "text-md mb-2", children: /* @__PURE__ */ jsx("ul", { className: "", children: data.message.split("\n").map(
                                    (line, index2) => /* @__PURE__ */ jsx(
                                      "li",
                                      {
                                        className: "break-words",
                                        children: /* @__PURE__ */ jsx(
                                          Linkify,
                                          {
                                            options: {
                                              target: "_blank",
                                              className: "text-blue-600 hover:underline"
                                            },
                                            children: line.trim()
                                          }
                                        )
                                      },
                                      index2
                                    )
                                  ) }) }) }),
                                  data.attachment_key && /* @__PURE__ */ jsx("div", { className: "rounded-md pb-2", children: /* @__PURE__ */ jsxs(
                                    "a",
                                    {
                                      href: data.download_url,
                                      target: "_blank",
                                      rel: "noopener noreferrer",
                                      className: "flex items-center bg-gray-200 p-1 gap-2  text-sm",
                                      children: [
                                        /* @__PURE__ */ jsx(File, { className: "size-4" }),
                                        sliceFilename(
                                          data.attachment_name,
                                          25
                                        )
                                      ]
                                    }
                                  ) }),
                                  /* @__PURE__ */ jsx("div", { className: "text-[10px] absolute right-1 -bottom-1 pb-1  text-gray-500", children: dayjs(
                                    data.created_at
                                  ).format("hh:mm a") })
                                ] })
                              ]
                            },
                            filteredItem || idx
                          )
                        ) }) : /* @__PURE__ */ jsx(
                          ChatMessage,
                          {
                            messageData: data,
                            refetch,
                            onEdit: (chatId, message2, created_at) => {
                              setEditingChatId(chatId);
                              setEditingMessage(message2);
                              setCreatedAt(created_at);
                              setMessage(message2);
                            }
                          }
                        )
                      }
                    )
                  ] }, data.id || index);
                }) })
              ] }, group.date);
            }) }) : /* @__PURE__ */ jsx("div", { className: "flex justify-center items-center h-full", children: /* @__PURE__ */ jsx(NoChatData, { className: "w-1/3" }) }),
            /* @__PURE__ */ jsx("div", { ref: messagesEndRef })
          ]
        }
      ),
      /* @__PURE__ */ jsx(
        ChatSend,
        {
          message,
          onMessageChange: handleMessageChange,
          sendMessage: handleSendOrUpdate,
          sendAttachment: (attachmentKey2, fileName2, file_type, file_size) => {
            setFileName(fileName2);
            createNewAttachment(
              attachmentKey2,
              fileName2,
              file_type,
              file_size
            );
          },
          isPending: isPendingCreateMessage || updateChatPending,
          isEditing: !!editingChatId,
          onCancelEdit: handleCancelEdit,
          disabled: isPendingCreateMessage || updateChatPending,
          refetch
        }
      )
    ] }) })
  ] });
};
export {
  ServiceChat as S
};
